/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.racun;

import domen.ModelGitare;
import domen.OpstiDomenskiObjekat;
import domen.Prodavac;
import domen.Racun;
import domen.StavkaRacuna;
import forme.model.FrmModeli;
import helper.Helper;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import komunikacija.Komunikacija;
import konstante.Konstante;
import transfer.KlijentTransferObjekat;
import transfer.ServerTransferObjekat;

/**
 *
 * @author Jovan
 */
public class FrmRacunUnos extends javax.swing.JPanel {

    public interface IKolicinaPromena {

        public void promenjenaKolicina(double ukupno);
    }

    /**
     * Creates new form FrmRacunUnos
     */
    public FrmRacunUnos() {
        initComponents();
        Racun r = (Racun) Helper.getInstance().get("r");
        jTextFieldBrojRacuna.setEnabled(false);
        jTextFieldProdavac.setEditable(false);
        jTextFieldDatum.setEditable(false);
        jTextFieldUkupno.setEditable(false);
        if (r != null) {
            prikazRacuna(r);
            Helper.getInstance().remove("r");
            JOptionPane.showMessageDialog(this, "Sistem prikazuje odabrani račun.");
            jButtonOK.setVisible(false);

        } else {
            srediFormu();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldDatum = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldProdavac = new javax.swing.JTextField();
        jTextFieldBrojRacuna = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStavkeRacuna = new javax.swing.JTable();
        jButtonOK = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldUkupno = new javax.swing.JTextField();
        jButtonDodajStavku = new javax.swing.JButton();
        jButtonUkloniStavku = new javax.swing.JButton();
        jButtonZatvori = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jLabel1.setText("Broj računa:");

        jLabel2.setText("Datum:");

        jLabel3.setText("Prodavac: ");

        jLabel4.setText("Stavke računa:");

        jTableStavkeRacuna.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableStavkeRacuna);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jLabel5.setText("Ukupno:");

        jButtonDodajStavku.setText("Dodaj stavku");
        jButtonDodajStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajStavkuActionPerformed(evt);
            }
        });

        jButtonUkloniStavku.setText("Ukloni stavku");
        jButtonUkloniStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUkloniStavkuActionPerformed(evt);
            }
        });

        jButtonZatvori.setText("Zatvori");
        jButtonZatvori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZatvoriActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldUkupno, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldProdavac, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldBrojRacuna))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonDodajStavku)))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonUkloniStavku)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonZatvori)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldBrojRacuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButtonDodajStavku)
                    .addComponent(jButtonUkloniStavku))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldUkupno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldProdavac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK)
                    .addComponent(jButtonZatvori))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDodajStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajStavkuActionPerformed
       StavkeTableModel model = (StavkeTableModel) jTableStavkeRacuna.getModel();
        model.dodajRed();
    }//GEN-LAST:event_jButtonDodajStavkuActionPerformed

    private void jButtonUkloniStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUkloniStavkuActionPerformed
        int red = jTableStavkeRacuna.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Odaberite red!");
        } else {
            StavkeTableModel model = (StavkeTableModel) jTableStavkeRacuna.getModel();
            model.obrisiRed(red);
            double ukupno = model.izracunajUkupno();
            jTextFieldUkupno.setText(ukupno + "");
        }
    }//GEN-LAST:event_jButtonUkloniStavkuActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        try {
            boolean validacija = true;
            Prodavac p = (Prodavac) Helper.getInstance().get("p");
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            Date datum = null;
            try {
                datum = df.parse(jTextFieldDatum.getText());
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Datum nije unet u ispravnom formatu (yyyy-MM-dd)");
                validacija = false;
            }
            if (validacija) {

                double ukupno = Double.parseDouble(jTextFieldUkupno.getText());
                StavkeTableModel model = (StavkeTableModel) jTableStavkeRacuna.getModel();
                List<StavkaRacuna> stavke = model.vratiStavke();
//                for(StavkaRacuna s:stavke){
//                    s.getRacun().setRacunID(0);
//                    s.getRacun().setProdavac(p);
//                    s.getRacun().setDatum(datum);
//                    s.getRacun().setIznosRacun(ukupno);
//                }
                
                
                
                Racun r = new Racun(0, ukupno, datum, p, stavke);
                
                if (validacija) {
                    KlijentTransferObjekat kto = new KlijentTransferObjekat();
                    if (jButtonOK.getText().equals("OK")) {
                        kto.setOperacija(Konstante.SACUVAJ_RACUN);
                    }
                    kto.setParametar(r);
                    Komunikacija.getInstance().posaljiZahtev(kto);
                    ServerTransferObjekat sto = Komunikacija.getInstance().procitajOdgovor();
                    if (sto.getRezultat() == Konstante.REZULTAT_NOK) {
                        throw new Exception(sto.getIzuzetak());
                    }
                    jTextFieldBrojRacuna.setText((sto.getOdgovor()) + "");
                    JOptionPane.showMessageDialog(this, "Račun je sačuvan");
                    SwingUtilities.getWindowAncestor(this).setVisible(false);

                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Račun nije sačuvan");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonZatvoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZatvoriActionPerformed
        SwingUtilities.getWindowAncestor(this).setVisible(false);
    }//GEN-LAST:event_jButtonZatvoriActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonDodajStavku;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonUkloniStavku;
    private javax.swing.JButton jButtonZatvori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableStavkeRacuna;
    private javax.swing.JTextField jTextFieldBrojRacuna;
    private javax.swing.JTextField jTextFieldDatum;
    private javax.swing.JTextField jTextFieldProdavac;
    private javax.swing.JTextField jTextFieldUkupno;
    // End of variables declaration//GEN-END:variables

    private void prikazRacuna(Racun r) {
        try {
            jButtonDodajStavku.setVisible(false);
            jButtonUkloniStavku.setVisible(false);
            DateFormat df = new SimpleDateFormat("dd.MM.yyyy");
            jTextFieldBrojRacuna.setText(r.getRacunID() + "");
            jTextFieldBrojRacuna.setEditable(false);
            jTextFieldBrojRacuna.setEnabled(false);
            jTextFieldUkupno.setText(r.getIznosRacun() + "");
            jTextFieldDatum.setText(df.format(r.getDatum()));

            IKolicinaPromena kolicinaPromena = new IKolicinaPromena() {
                @Override
                public void promenjenaKolicina(double ukupno) {
                    jTextFieldUkupno.setText(ukupno + "");
                }
            };

            StavkeTableModel model = new StavkeTableModel(r.getStavkeRacuna(), kolicinaPromena);

            jTableStavkeRacuna.setModel(model);

            jTextFieldProdavac.setText(r.getProdavac().getImePrezime());

            KlijentTransferObjekat kto = new KlijentTransferObjekat();
            kto.setOperacija(Konstante.VRATI_MODELE);
            Komunikacija.getInstance().posaljiZahtev(kto);
            ServerTransferObjekat sto = Komunikacija.getInstance().procitajOdgovor();
            List<OpstiDomenskiObjekat> lm = (List<OpstiDomenskiObjekat>) sto.getOdgovor();
            if (sto.getRezultat() == Konstante.REZULTAT_NOK) {
                throw new Exception(sto.getIzuzetak());
            }
            JComboBox jcbModel = new JComboBox();
//            for (OpstiDomenskiObjekat m : lm) {
//                jcbModel.addItem((ModelGitare) m);
//            }
            jcbModel.setModel(new DefaultComboBoxModel(lm.toArray()));

            TableColumnModel tcm = jTableStavkeRacuna.getColumnModel();
            TableColumn tcProizvod = tcm.getColumn(1);
            tcProizvod.setCellEditor(new DefaultCellEditor(jcbModel));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Neuspesno učitavanje modela gitare!");
        }
    }

    private void srediFormu() {
        try {

            IKolicinaPromena kolicinaPromena = new IKolicinaPromena() {
                @Override
                public void promenjenaKolicina(double ukupno) {
                    jTextFieldUkupno.setText(ukupno + "");
                }
            };

            StavkeTableModel model = new StavkeTableModel(new ArrayList<>(), kolicinaPromena);
            jTableStavkeRacuna.setModel(model);

            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date date = new Date();
            jTextFieldDatum.setText(dateFormat.format(date));

            Prodavac p = (Prodavac) Helper.getInstance().get("p");
            jTextFieldProdavac.setText(p.getImePrezime());

            KlijentTransferObjekat kto = new KlijentTransferObjekat();
            kto.setOperacija(Konstante.VRATI_MODELE);
            Komunikacija.getInstance().posaljiZahtev(kto);
            ServerTransferObjekat sto = Komunikacija.getInstance().procitajOdgovor();
            List<OpstiDomenskiObjekat> lm = (List<OpstiDomenskiObjekat>) sto.getOdgovor();

            if (sto.getRezultat() == Konstante.REZULTAT_NOK) {
                throw new Exception(sto.getIzuzetak());
            }

            JComboBox jComboBoxModel = new JComboBox();
            for (OpstiDomenskiObjekat m : lm) {
                jComboBoxModel.addItem((ModelGitare) m);
            }
            TableColumnModel tcm = jTableStavkeRacuna.getColumnModel();
            TableColumn tcModelTelefona = tcm.getColumn(1);
            tcModelTelefona.setCellEditor(new DefaultCellEditor(jComboBoxModel));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Neuspesno učitavanje modela gitare!");
        }
    }
}
